for (j in 1:2) {
a[i,j] = a[i,j]+(matrice[i,j]-m[j])^2
}
}
a
matrice = matrix(c(10,11,12,28,20,23,28,15), ncol = 2, nrow = 4)
a = matrix(0, ncol=4, nrow = 4)
for (i in 1:4) {
m1 = mean(matrice[i:nrow(matrice),1])
m2 = mean(matrice[i:nrow(matrice),2])
m = c(m1,m2)
for (j in 1:2) {
a[i,j] = a[i,j]+(matrice[i,j]-m[j])^2
}
a[i,j] = sqrt(a[i,j])
}
a
for (i in 1:4) {
m1 = mean(matrice[i:nrow(matrice),1])
m2 = mean(matrice[i:nrow(matrice),2])
m = c(m1,m2,m1,m2)
for (j in 1:4) {
a[i,j] = a[i,j]+(matrice[i,j]-m[j])^2
}
a[i,j] = sqrt(a[i,j])
}
a = matrix(0, ncol=4, nrow = 4)
for (i in 1:4) {
m1 = mean(matrice[i:nrow(matrice),1])
m2 = mean(matrice[i:nrow(matrice),2])
m = c(m1,m2,m1,m2)
for (j in 1:4) {
a[i,j] = a[i,j]+(matrice[i,j]-m[j])^2
}
a[i,j] = sqrt(a[i,j])
}
a
for (i in 1:4) {
m1 = mean(matrice[i:nrow(matrice),1])
m2 = mean(matrice[i:nrow(matrice),2])
m = c(m1,m2,m1,m2)
for (j in 1:4) {
a[i,j] = a[i,j]+(matrice[i,j]-m[j])^2
}
}
test = matrix(c(10,11,12,28,20,23,28,15,1,1,1,2), ncol = 3, nrow = 4)
d = dist(test[,1:2], diag = TRUE) #on prends pas la ligne des clusters
d
d = dist(test[,1:2], diag) #on prends pas la ligne des clusters
d = dist(test[,1:2]) #on prends pas la ligne des clusters
attr(d, "Size")
test = matrix(c(10,11,12,28,20,23,28,15,1,1,1,2), ncol = 3, nrow = 4)
d = dist(test[,1:2]) #on prends pas la ligne des clusters
cluster = unique(test[,3])
k=length(cluster)
wds <- matrix(0, n,3, dimnames =list(names(x), c("cluster","neighbor","sil_width")))
n=length(test)
wds <- matrix(0, n,3, dimnames =list(names(x), c("cluster","neighbor","sil_width")))
wds <- matrix(0, n,3)
for(j in 1:k) { # j-th cluster:
Nj <- sum(iC <- x == cluster[j])
wds[iC, "cluster"] <- cluster[j]
## minimal distances to points in all other clusters:
diC <- rbind(apply(d[!iC, iC, drop = FALSE], 2,
function(r) tapply(r, x[!iC], mean)))# (k-1) x Nj
## max.col() breaks ties at random;  rather do not want random
##   behavior of silhouette, (but rather "pam" compatible one):
minC <- apply(diC, 2, which.min)
## FIXME minC <- max.col(-t(diC))
## FIXME : extend max.col(*, ties.method = "min") {or similar} !
wds[iC,"neighbor"] <- cluster[-j][minC]
s.i <- if(Nj > 1) {
a.i <- colSums(d[iC, iC])/(Nj - 1) # length(a.i)= Nj
b.i <- diC[cbind(minC, seq(along = minC))]
ifelse(a.i != b.i, (b.i - a.i) / pmax(b.i, a.i), 0)
} else 0
wds[iC,"sil_width"] <- s.i
}
test==1
for(j in 1:k) { # j-th cluster:
Nj <- sum(iC <- test == cluster[j])
wds[iC, "cluster"] <- cluster[j]
## minimal distances to points in all other clusters:
diC <- rbind(apply(d[!iC, iC, drop = FALSE], 2,
function(r) tapply(r, x[!iC], mean)))# (k-1) x Nj
## max.col() breaks ties at random;  rather do not want random
##   behavior of silhouette, (but rather "pam" compatible one):
minC <- apply(diC, 2, which.min)
## FIXME minC <- max.col(-t(diC))
## FIXME : extend max.col(*, ties.method = "min") {or similar} !
wds[iC,"neighbor"] <- cluster[-j][minC]
s.i <- if(Nj > 1) {
a.i <- colSums(d[iC, iC])/(Nj - 1) # length(a.i)= Nj
b.i <- diC[cbind(minC, seq(along = minC))]
ifelse(a.i != b.i, (b.i - a.i) / pmax(b.i, a.i), 0)
} else 0
wds[iC,"sil_width"] <- s.i
}
names(tese)
names(test)
test = matrix(c(10,11,12,28,20,23,28,15,1,1,1,2), ncol = 3, nrow = 4)
names(test) = c("oui","oui","oui")
wds <- matrix(0, n,3,dimnames =
list(names(test), c("cluster","neighbor","sil_width")))
wds
for(j in 1:k) { # j-th cluster:
Nj <- sum(iC <- test == cluster[j])
wds[iC, "cluster"] <- cluster[j]
## minimal distances to points in all other clusters:
diC <- rbind(apply(d[!iC, iC, drop = FALSE], 2,
function(r) tapply(r, x[!iC], mean)))# (k-1) x Nj
## max.col() breaks ties at random;  rather do not want random
##   behavior of silhouette, (but rather "pam" compatible one):
minC <- apply(diC, 2, which.min)
## FIXME minC <- max.col(-t(diC))
## FIXME : extend max.col(*, ties.method = "min") {or similar} !
wds[iC,"neighbor"] <- cluster[-j][minC]
s.i <- if(Nj > 1) {
a.i <- colSums(d[iC, iC])/(Nj - 1) # length(a.i)= Nj
b.i <- diC[cbind(minC, seq(along = minC))]
ifelse(a.i != b.i, (b.i - a.i) / pmax(b.i, a.i), 0)
} else 0
wds[iC,"sil_width"] <- s.i
}
test
k
cluster = unique(test[,3])
k=3
n=3
wds <- matrix(0, n,3,dimnames =
list(names(test), c("cluster","neighbor","sil_width")))
for(j in 1:k) { # j-th cluster:
Nj <- sum(iC <- test == cluster[j])
wds[iC, "cluster"] <- cluster[j]
## minimal distances to points in all other clusters:
diC <- rbind(apply(d[!iC, iC, drop = FALSE], 2,
function(r) tapply(r, x[!iC], mean)))# (k-1) x Nj
## max.col() breaks ties at random;  rather do not want random
##   behavior of silhouette, (but rather "pam" compatible one):
minC <- apply(diC, 2, which.min)
## FIXME minC <- max.col(-t(diC))
## FIXME : extend max.col(*, ties.method = "min") {or similar} !
wds[iC,"neighbor"] <- cluster[-j][minC]
s.i <- if(Nj > 1) {
a.i <- colSums(d[iC, iC])/(Nj - 1) # length(a.i)= Nj
b.i <- diC[cbind(minC, seq(along = minC))]
ifelse(a.i != b.i, (b.i - a.i) / pmax(b.i, a.i), 0)
} else 0
wds[iC,"sil_width"] <- s.i
}
library(fields)
install.packages("fields")
library(fields)
rdist(test[,1:2])
matrice_dist = rdist(test[,1:2]);matrice_dist
matrice_dist[1,1]
matrice_dist[1,2]
colMeans(matrice_dist)
cbind(matrice_dist,c(1,1,1,2))
matrice_cmp = cbind(matrice_dist,c(1,1,1,2))
matrice_cmp = cbind(matrice_dist,c(1,1,1,2));matrice_cmp
Nj <- sum(iC <- x == cluster[j])
Nj <- sum(iC <- test == cluster[j])
Nj
wds[iC, "cluster"] <- cluster[j]
wds
remove(wds)
wds[iC, "cluster"] <- cluster[j]
wds = matrix(0, ncol = 3, nrow = 4)
wds[iC, "cluster"] <- cluster[j]
Nj
iC
wds = matrix(0, ncol = 3, nrow = 3)
wds
wds[iC, "cluster"] <- cluster[j]
matrice_dist = rdist(test[,1:2]);matrice_dist
matrice_cmp = cbind(matrice_dist,c(1,1,1,2));matrice_cmp
matrice_dist[matrice_cmp[,5]==1,]
matrice_dist[matrice_cmp[,5]==2,]
m1=matrice_dist[matrice_cmp[,5]==1,matrice_cmp[,5]==1]
m1
m2=matrice_dist[matrice_cmp[,5]==2]
m2
m1=matrice_dist[,matrice_cmp[,5]==1]
m1
m1=matrice_dist[matrice_cmp[,5]==1]
m1
m1=matrice_dist[matrice_cmp[,5]==1,matrice_cmp[,5]==1]
m1
m2=matrice_dist[matrice_cmp[,5]==2,matrice_cmp[,5]==2]
m2
m2=matrice_dist[matrice_cmp[,5]==2]
m2
m2=matrice_dist[,matrice_cmp[,5]==2]
m2
m2=matrice_dist[matrice_cmp[,5]==2]
m2
m1
rowsum(m1)
rowSums(m1)
rowMeans(m1)
rowsum(m1)/2
rowsum(m1)
rowSums(m1)/2
rowSums(m2)/2
sum(m2)/2
class(m1)
class(m2)
m2=as.matrix(matrice_dist[matrice_cmp[,5]==2])
m2
m2=t(as.matrix(matrice_dist[matrice_cmp[,5]==2]))
m2
m1
ncol(m1)
rowSums(m2)/2
m2
max(m1)
(max(m1)+max(m2))/max(max(m1),max(m2))
max(m2)
m2=t(as.matrix(matrice_dist[matrice_cmp[,5]==2]))
max(m2)
(max(m2)-max(m1))/max(max(m1),max(m2))
max(m2)
max(m1)
colSums(m1)
rowSums(m1)/2
(max(m2)-max(rowSums(m1)/2))/max(max(rowSums(m1)/2),max(m2))
m1=matrice_dist[matrice_cmp[,5]==1,matrice_cmp[,5]==1]
m1
rowSums(m1)/2
rowSums(m1)/2[1]
(rowSums(m1)/2)[1]
m2[1]
SW=0
for (i in 1:nrow(m1)) {
SW = SW + (m2[i]-(rowSums(m1)/2)[i])/max(m2[i],(rowSums(m1)/2)[i])
}
SC = SW/4
SC
for (i in 1:length(cluster)) {
a=cluster[i]
m1=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==a,matrice_cmp[,ncol(matrice_cmp)]==a])
m2=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]!=a,matrice_cmp[,ncol(matrice_cmp)]!=a])
print(m1)
}
for (i in 1:length(cluster)) {
a=cluster[i]
m1=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==a,matrice_cmp[,ncol(matrice_cmp)]==a])
m2=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]!=a,matrice_cmp[,ncol(matrice_cmp)]!=a])
print(m2)
}
m1=matrice_dist[matrice_cmp[,5]==1]
m1
m1=as.matrix(matrice_dist[matrice_cmp[,5]==1])
m1
m1=as.matrix(matrice_dist[matrice_cmp[,5]==1],matrice_dist[matrice_cmp[,5]==1])
m1
m1=matrice_dist[matrice_cmp[,5]==1],matrice_dist[matrice_cmp[,5]==1]
m1=matrice_dist[matrice_cmp[,5]==1,matrice_dist[matrice_cmp[,5]==1]
m1=matrice_dist[matrice_cmp[,5]==1,matrice_cmp[,5]==1]
m1
matrice_dist[matrice_cmp[,5]==2,matrice_cmp[,5]==2]
matrice_dist[matrice_cmp[,5]==1,matrice_cmp[,5]==1]
matrice_dist[matrice_cmp[,5]==2]
matrice_dist[matrice_cmp[,5]==2,]
matrice_dist[matrice_cmp[,5]==1,]
matrice_dist[,matrice_cmp[,5]==1]
for (i in 1:length(cluster)) {
a=cluster[i]
m1=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==a,matrice_cmp[,ncol(matrice_cmp)]==a])
m2=t(as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]=!a]))
print(m2)
}
for (i in 1:length(cluster)) {
a=cluster[i]
m1=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==a,matrice_cmp[,ncol(matrice_cmp)]==a])
m2=t(as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]=!a]))
print(m2)
}
for (i in 1:length(cluster)) {
a=cluster[i]
m1=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==a,matrice_cmp[,ncol(matrice_cmp)]==a])
m2=t(as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]=!a]))
print(m2)
}
for (i in 1:length(cluster)) {
a=cluster[i]
m1=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==a,matrice_cmp[,ncol(matrice_cmp)]==a])
m2=t(as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]=!a]))
print(m2)
}
a
for (i in 1:length(cluster)) {
a=cluster[i]
m1=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==a,matrice_cmp[,ncol(matrice_cmp)]==a])
m2=t(as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]=!a]))
print(m2)
}
for (i in 1:length(cluster)-1) {
a=cluster[i]
m1=as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==a,matrice_cmp[,ncol(matrice_cmp)]==a])
m2=t(as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]=!a]))
print(m1)
}
for (i in 1:length(cluster)) {
a=cluster[i]
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,matrice_cmp[,ncol(matrice_cmp)]==i]
print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,]
print(m)
}
length(cluster)
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,]
# print(m)
}
matrice_cmp[,ncol(matrice_cmp)]
matrice_cmp[,ncol(matrice_cmp)]==2
for (i in 1:length(cluster)) {
a=cluster[i]
m = matrice_dist[,matrice_cmp[,ncol(matrice_cmp)]==i]
# print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
m = matrice_dist[,matrice_cmp[,ncol(matrice_cmp)]==i]
print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[,matrice_cmp[,ncol(matrice_cmp)]==i]
print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,]
print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,1:ncol(matrice_cmp)-1]
print(m)
}
ncol(matrice_cmp)-1
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i]
print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,]
print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = as.matrix(matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,])
print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,]
print(m)
}
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,]
print(class(m))
}
is.matrix(m)
is.matrix(m1)
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,]
print(m)
}
ncol(matrice_dist)
for (i in 1:length(cluster)) {
a=cluster[i]
print(a)
m = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==i,1:ncol(matrice_dist)-1]
print(m)
}
rep(0,ncol(matrice_dist)-1)
a=matrix()
a
a[1]=1
a
a[2]=1
a
m11 = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]==cluster[1],1:ncol(matrice_dist)-1]
m11
m12 = matrice_dist[matrice_cmp[,ncol(matrice_cmp)]!=cluster[1],1:ncol(matrice_dist)-1]
m12
length(cluster)
ncol(m11)-1
rowSums(m22)
b=rowSums(m12)
if(!is.matrix(m12)){
m12 = t(as.matrix(m12))
}
b=rowSums(m12)
b
b=colSums(m12)
b
m12
a=colSums(m11)/ncol(m11)-1
a
a=rowSums(m11)/ncol(m11)-1
a
a=colSums(m11)/ncol(m11)-1
b=colSums(m12)
SW = 0
for (i in 1:nrow(m11)) {
SW = SW = SW + (b[i]-a[i])/max(b[i],a[i])
}
SW
SC = SW/nrow(matrice_cmp)
SC = SW/nrow(matrice_cmp);SC
nrow(matrice_cmp)
SW
SW=0
for (i in 1:nrow(m1)) {
SW = SW + (m2[i]-(rowSums(m1)/2)[i])/max(m2[i],(rowSums(m1)/2)[i])
}
SW
SC = SW/4
SC
test = matrix(c(10,11,12,28,20,23,28,15,1,1,1,2), ncol = 3, nrow = 4)
cluster = unique(test[,3])
matrice_dist = rdist(test[,1:2]);matrice_dist #on prends pas la ligne des clusters
matrice_cmp = cbind(matrice_dist,c(1,1,1,2));matrice_cmp
m1=matrice_dist[matrice_cmp[,5]==1,matrice_cmp[,5]==1]
m2=t(as.matrix(matrice_dist[matrice_cmp[,5]==2]))
SW = 0
for (i in 1:nrow(m11)) {
SW = SW = SW + (b[i]-a[i])/max(b[i],a[i])
}
SC = SW/nrow(matrice_cmp);SC
SW=0
for (i in 1:nrow(m1)) {
SW = SW + (m2[i]-(rowSums(m1)/2)[i])/max(m2[i],(rowSums(m1)/2)[i])
}
SC = SW/4
SC = SW/4;SC
m1
m11
m2
m12
rowSums(m1)/2
a=colSums(m11)/(ncol(m11)-1)
b=colSums(m12)
SW = 0
for (i in 1:nrow(m11)) {
SW = SW = SW + (b[i]-a[i])/max(b[i],a[i])
}
SC = SW/nrow(matrice_cmp);SC
install.packages(c("devtools", "usethis", "roxygen2"))
AVAILABLE::AVAILABLE("MONPACKAGE")
AVAILABLE::AVAILABLE("cluster")
AVAILABLE::AVAILABLE("MASS")
AVAILABLE("MONPACKAGE")
AVAILABLE::AVAILABLE(MASS)
setwd("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/Package_R_Caracterisation_Classes_Clustering/testpackage/testbispackage")
setwd("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex")
datas = read_excel("auto.xlsx")
autos = datas[,2:8]
row.names(autos) = datas$Modele
autos.cr = scale(autos, center = T, scale = T)
d.autos = dist(autos.cr)
cah = hclust(d.autos, method="ward.D2")
groupes.cah <- cutree(cah, k=4)
my_clust = cbind(datas[,-1], groupes.cah)
###################--------------------------------Test--------------------------------------------
#import des donn?es
library(readxl)
datas = read_excel("auto.xlsx")
autos = datas[,2:8]
row.names(autos) = datas$Modele
autos.cr = scale(autos, center = T, scale = T)
d.autos = dist(autos.cr)
cah = hclust(d.autos, method="ward.D2")
groupes.cah <- cutree(cah, k=4)
my_clust = cbind(datas[,-1], groupes.cah)
cate = categorisation(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
library(testbispackage)
cate = categorisation(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
library(testbispackage)
datas = read_excel("auto.xlsx")
autos = datas[,2:8]
row.names(autos) = datas$Modele
autos.cr = scale(autos, center = T, scale = T)
d.autos = dist(autos.cr)
cah = hclust(d.autos, method="ward.D2")
groupes.cah <- cutree(cah, k=4)
my_clust = cbind(datas[,-1], groupes.cah)
cate = categorisation(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
cate = testbispackage::categorisation(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
