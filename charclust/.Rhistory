}
b_ = list()
bi = 0
for (k in 1:length(unique(var_grp))) {
b = 0
if(cluster != unique(var_grp)[k]){
m = m_cplt[m_cplt[,ncol(m_cplt)]==unique(var_grp)[k], -ncol(m_cplt)]
ik_ = length(var_grp[var_grp==unique(var_grp)[k]])
if(ncol(as.matrix(m))==1){m = rbind(0, m)}
b = colSums(m)[i]/ik_
b_ = append(b_, b)
}
}
bi = min(unlist(b_))
}
sil[i] = (bi-ai)/(max(bi,ai))
if(is.na(sil[i])){
sil[i] = 0
}
}
out = data.frame(cbind(sil,var_grp))
colnames(out) = c("sil", "cluster")
sil_clust = tapply(out$sil, out$cluster, mean)
sil_glob = mean(sil_clust)
silhouette = list(sil_clust, sil_glob)
p = as.data.frame(silhouette[[1]])
p = cbind(p, as.numeric(rownames(p)))
colnames(p) = c("sil", "cluster")
graph = ggplot(data=p ,aes(x=sil, y=rownames(p))) +
geom_bar(stat="identity", color = "black", fill = "steelblue") +
xlim(-1, 1) +
xlab("sil") + ylab("cluster") +
theme_minimal()
output = list(silclus = sil_clust, silglob = sil_glob, plot = graph)
return(output)
}
#--------------------Davies Bouldin---------------------------------------
db.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
cluster = obj$grp
n = length(cluster)
k = length(unique(obj$grp))
centre=matrix(nrow=k,ncol=ncol(obj$act)) #centroides
for(i in 1:k){
for(j in 1:ncol(obj$act)){
centre[i,j]=mean(obj$act[cluster==i,j])
}
}
s=c() #distance entre le point et le centroide
for(i in 1:k){
c=centre[i,]
c_bis = sapply(c, rep, nrow(obj$act[obj$grp==i,]))
s[i] = mean(sqrt(apply((obj$act[obj$grp==i,] - c_bis)^2,1,sum))^2)^(1/2)
}
M = rdist(centre) #distance entre centroides
r = matrix(0,nrow=k, ncol = k)
ri = c()
for (i in 1:k){
for (j in 1:k){
r[i,j] = (s[i] + s[j])/M[i,j]
if(r[i,j]==Inf | is.na(r[i,j]==Inf)){r[i,j]=0}
}
ri[i] = max(r[i,])
}
db = mean(ri)
return(db)
}
View(iris)
objet = categorisation(iris, iris[,-5], NULL, iris$Species)
print.categorisation(iris)
objet$data
objet$act
colnames(objet$act)
#On surcharge la m√©thode print
print.categorisation = function(obj){
cat("variables actives: ", colnames(obj$act), "\n") #CELLE LIGNE NE MARCHE PAS QUAND ON A UNE SEUL VARIABLE!!!!
cat("variables illustratives: ", colnames(obj$illus), "\n") #CELLE LIGNE NE MARCHE PAS QUAND ON A UNE SEUL VARIABLE!!!!
cat("Nombre de groupes: ", length(obj$n_grp), "\n")
}
print(objet)
univariee.categorisation(objet)
db.categorisation(objet)
sil.categorisation(objet)
a = sil.categorisation(objet)
adl.categorisation(objet)
a = vtest.categorisation(objet)
a = sortie_graph(objet)
a = sortie_graph(objet, type = "act")
a$Sepal.Length
vtest.categorisation(objet)
#GENERALISATION VTEST POUR LES DEUX TYPES
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
#return(vt)
#graph<-graph_vtest(vt[[1]])
return(list(num = vt,graph = graph))
}
vtest.categorisation(objet)
#GENERALISATION VTEST POUR LES DEUX TYPES
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
#return(vt)
#graph<-graph_vtest(vt[[1]])
return(vt)
#return(list(num = vt,graph = graph))
}
vtest.categorisation(objet)
a = sortie_graph(objet, type = "acp")
a$ind
calculs_uni(iris$Sepal.Length, iris$Species)
cbind(iris[,-4], NULL)
univariee.categorisation = function(obj){
#sortie_uni = sapply(obj$data[obj$act], calculs_uni, cluster=obj$grp)
if(!is.null(obj$illus)){my_data = cbind(obj$act, obj$illus)} else{my_data = obj$act}
sortie_uni = lapply(my_data, calculs_uni, cluster=obj$grp)
return(sortie_uni)
}
calculs_uni(iris$Sepal.Length, iris$Species)
univariee.categorisation(objet)
univariee.categorisation = function(obj){
#sortie_uni = sapply(obj$data[obj$act], calculs_uni, cluster=obj$grp)
if(!is.null(obj$illus)){my_data = cbind(obj$act, obj$illus)} else{my_data = obj$act}
sortie_uni = lapply(my_data, calculs_uni, cluster=obj$grp)
return(sortie_uni)
}
univariee.categorisation(objet)
univariee.categorisation = function(obj){
#sortie_uni = sapply(obj$data[obj$act], calculs_uni, cluster=obj$grp)
if(!is.null(obj$illus)){my_data = cbind(obj$act, obj$illus)} else{my_data = obj$act}
print(my_data)
sortie_uni = lapply(my_data, calculs_uni, cluster=obj$grp)
return(sortie_uni)
}
univariee.categorisation(objet)
length(objet$illus)
univariee.categorisation = function(obj){
#sortie_uni = sapply(obj$data[obj$act], calculs_uni, cluster=obj$grp)
#print(is.nu)
if(length(obj$illus)!=0){my_data = cbind(obj$act, obj$illus)} else{my_data = obj$act}
#print(my_data)
sortie_uni = lapply(my_data, calculs_uni, cluster=obj$grp)
return(sortie_uni)
}
univariee.categorisation(objet)
length(NULL)
########################"
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
col_quanti = colnames(df_quanti)
if(length(col_quali)!=0){vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)}else{vt_quali = NULL}
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
#return(vt)
graph<-graph_vtest(vt[[1]])
return(list(num = vt,graph = graph))
}
a = vtest.categorisation(objet)
#GENERALISATION VTEST POUR LES DEUX TYPES
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
#return(vt)
graph<-graph_vtest(vt[[1]])
return(list(num = vt,graph = graph))
}
a = vtest.categorisation(objet)
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
return(vt)
#graph<-graph_vtest(vt[[1]])
#return(list(num = vt,graph = graph))
}
vtest.categorisation(objet)
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
print(vt[[1]])
return(vt)
#graph<-graph_vtest(vt[[1]])
#return(list(num = vt,graph = graph))
}
vtest.categorisation(objet)
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
print(vt[1])
return(vt)
#graph<-graph_vtest(vt[[1]])
#return(list(num = vt,graph = graph))
}
vtest.categorisation(objet)
library(readxl)
library(questionr)
library(ggplot2)
library("FactoMineR")
library("factoextra")
library(ggfortify)
library(reshape2)
library(MASS)
library(fields)
library(biganalytics)
library(clusterSim)
index.DB(iris[,-5], iris$Species)
index.DB(iris, iris$Species)
data(iris)
is.data.frame(cbind(c(1,2),c(2,2)))
(cbind(c(1,2),c(2,2)))
as.data(cbind(c(1,2),c(2,2)))
as.data.frame(cbind(c(1,2),c(2,2)))
X = c(10, 11, 12, 28)
Y = c(20, 23, 28, 15)
cl = c(1, 1, 1, 2)
data = as.data.frame(cbind(X, Y, cl))
data
colnames(data) = c("X", "Y", "cluster")
data
obj = categorisation(data, data[, -3], NULL, data$cluster)
obj
sil.categorisation(obj)
(0.796+0.853+0.784)/3
s = sil.categorisation(obj)
s[1]
db.categorisation(obj = )
db.categorisation(obj)
library(charclust)
?categorisation
calculs_uni(cate)
calculs_uni(obj)
univariee.categorisation(obj)
library(charclust)
?categorisation
?univariee.categorisation
?db.categorisation
?sil.categorisation
univariee.categorisation(obj)
print(univariee.categorisation(obj))
data<-read.csv2("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.csv",header=T,sep=";",dec=".")
str(data)
data2<-subset(data,annee==2012 & situation=="30 mois apres le diplome"& remarque=="",select=c(2,4,6:8,10,16:19,21,27))
data.reduite<- na.omit(data2) #on enleve les lignes avec valeurs manquantes
View(data.reduite)
insertion_master<- na.omit(data2) #on enleve les lignes avec valeurs manquantes
View(insertion_master)
use_data(insertion_master)
usethis::use_data(insertion_master)
library(charclust)
library(readxl)
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.csv",header=T,sep=";",dec=".")
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.csv")
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.xlsx",header=T,sep=";",dec=".")
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.xlsx")
View(data)
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master2.csv",header=T,sep=";",dec=".")
data<-read.csv2("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master2.csv",header=T,sep=";",dec=".")
View(data)
str(data)
data2<-subset(data,annee==2012 & situation=="30 mois apres le diplome"& remarque=="",select=c(2,4,6:8,10,16:19,21,27))
insertion_master<- na.omit(data2) #on enleve les lignes avec valeurs manquantes
View(insertion_master)
usethis::use_data(insertion_master)
library(charclust)
library(charclust)
nrow(NULL)
NULL ==3
a = 3
names(a) = c('name')
a
library(charclust)
data("insertion_master")
data.illu <- insertion_master[,c(1:6,12)]
data.act <-insertion_master[,7:11]
res.kmeans<-kmeans(data.act,centers=3,nstart=5)
obj <- objcharac(insertion_master, data.act, data.illu, res.kmeans$cluster)
uni = charac_uni(obj)
library(charclust)
data(insertion_master)
data.illu <- insertion_master[,c(1:6,12)]
data.act <-insertion_master[,7:11]
res.kmeans<-kmeans(data.act,centers=3,nstart=5)
obj <- objcharac(insertion_master, data.act, data.illu, res.kmeans$cluster)
uni = charac_uni(obj)
#graph for active variables
g_act <- charac_graph(obj, type = "act")
print(g_act)
print(g_act$taux_dinsertion)
#graph for illustrative variables, distribution foreach cluster
g_illus <- charac_graph(obj, type = "illus", profile = "l")
library(charclust)
data(insertion_master)
data.illu <- insertion_master[,c(1:6,12)]
data.act <-insertion_master[,7:11]
res.kmeans<-kmeans(data.act,centers=3,nstart=5)
obj <- objcharac(insertion_master, data.act, data.illu, res.kmeans$cluster)
#graph for active variables
g_act <- charac_graph(obj, type = "act")
print(g_act$taux_dinsertion)
#graph for illustrative variables, distribution foreach cluster
g_illus <- charac_graph(obj, type = "illus", profile = "l")
print(g_illus)
print(g_illus$domaine)
#' #graph for illustrative variables, distribution of clusters foreach modality
g_illus2 <- charac_graph(obj, type = "illus", profile = "c")
print(g_illus2)
print(g_illus2$domaine)
#PCA graph
g_pca <-  charac_graph(obj, type = "pca")
g_pca
#Contribution of variables foreach components
g_pca$var
#Individuals and clusters in PCA chart
g_pca$ind
#Individuals and clusters in PCA chart with labels
g_pca$ind_lab
print(g_act)
print(g_act$taux_dinsertion)
t = testval(obj)
#print all numerical results
print(t$num)
#plot radar chart of values test for numeric variables
t$graph
#print result for numeric variables
tquanti <- t$num[[1]]
print(tquanti)
#print result for one numeric variable
print(tquanti[,"taux_dinsertion"])
#print result for qualitative variables
tquali <- t$num[[2]]
print(tquali)
#print result for one qualitative variable
print(tquali$domaine)
db2 = db_index(obj)
print(db2)
adl = clustlda(obj)
#the coefficients of LDA model
print(adl$coef_LDA)
#the confusion matrix
print(adl$confusion_matrix)
print(adl$eval)
s2 = sil(obj)
s2$silclus
s2$silglob
s2$plot
