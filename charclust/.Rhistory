} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
col_quanti = colnames(df_quanti)
if(length(col_quali)!=0){vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)}else{vt_quali = NULL}
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
#return(vt)
graph<-graph_vtest(vt[[1]])
return(list(num = vt,graph = graph))
}
a = vtest.categorisation(objet)
#GENERALISATION VTEST POUR LES DEUX TYPES
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
#return(vt)
graph<-graph_vtest(vt[[1]])
return(list(num = vt,graph = graph))
}
a = vtest.categorisation(objet)
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
return(vt)
#graph<-graph_vtest(vt[[1]])
#return(list(num = vt,graph = graph))
}
vtest.categorisation(objet)
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
print(vt[[1]])
return(vt)
#graph<-graph_vtest(vt[[1]])
#return(list(num = vt,graph = graph))
}
vtest.categorisation(objet)
vtest.categorisation = function(obj){
if(!is.categorisation(obj)){
stop("L'argument obj n'est pas de type categorisation")
}
suppressWarnings(if(nrow(obj$illus)==0){my_data = obj$act} else{my_data = cbind(obj$act, obj$illus)})
var_grp = obj$grp
df_quanti = as.data.frame(obj$data[obj$var_grp])
df_quali = as.data.frame(obj$data[obj$var_grp])
rename.variable(data.frame(df_quali), colnames(data.frame(df_quali)), "var_grp")
#print(df_quali)
col = colnames(my_data) #nom des colonnes
#print(col)
for (i in 1:ncol(my_data)) {
var = col[i]
if(is.numeric(my_data[,var])){ #on recupere les variables quanti
df_quanti[var] = my_data[,var]
} else{
df_quali[var] = my_data[,var] #on recupere les variables quali
}
}
col_quali = colnames(df_quali)
vt_quali = sapply(my_data[,col_quali], vtest_quali, y=var_grp)
col_quanti = colnames(df_quanti)
vt_quanti = sapply(my_data[col_quanti], vtest_quanti, y=var_grp)
vt = list(vt_quanti, vt_quali)
if(length(vt[[1]]) == 0){vt = vt[[2]]}
if(length(vt[[2]]) == 0){vt = vt[[1]]}
print(vt[1])
return(vt)
#graph<-graph_vtest(vt[[1]])
#return(list(num = vt,graph = graph))
}
vtest.categorisation(objet)
library(readxl)
library(questionr)
library(ggplot2)
library("FactoMineR")
library("factoextra")
library(ggfortify)
library(reshape2)
library(MASS)
library(fields)
library(biganalytics)
library(clusterSim)
index.DB(iris[,-5], iris$Species)
index.DB(iris, iris$Species)
data(iris)
is.data.frame(cbind(c(1,2),c(2,2)))
(cbind(c(1,2),c(2,2)))
as.data(cbind(c(1,2),c(2,2)))
as.data.frame(cbind(c(1,2),c(2,2)))
X = c(10, 11, 12, 28)
Y = c(20, 23, 28, 15)
cl = c(1, 1, 1, 2)
data = as.data.frame(cbind(X, Y, cl))
data
colnames(data) = c("X", "Y", "cluster")
data
obj = categorisation(data, data[, -3], NULL, data$cluster)
obj
sil.categorisation(obj)
(0.796+0.853+0.784)/3
s = sil.categorisation(obj)
s[1]
db.categorisation(obj = )
db.categorisation(obj)
library(charclust)
?categorisation
calculs_uni(cate)
calculs_uni(obj)
univariee.categorisation(obj)
library(charclust)
?categorisation
?univariee.categorisation
?db.categorisation
?sil.categorisation
univariee.categorisation(obj)
print(univariee.categorisation(obj))
data<-read.csv2("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.csv",header=T,sep=";",dec=".")
str(data)
data2<-subset(data,annee==2012 & situation=="30 mois apres le diplome"& remarque=="",select=c(2,4,6:8,10,16:19,21,27))
data.reduite<- na.omit(data2) #on enleve les lignes avec valeurs manquantes
View(data.reduite)
insertion_master<- na.omit(data2) #on enleve les lignes avec valeurs manquantes
View(insertion_master)
use_data(insertion_master)
usethis::use_data(insertion_master)
library(charclust)
library(readxl)
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.csv",header=T,sep=";",dec=".")
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.csv")
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.xlsx",header=T,sep=";",dec=".")
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master.xlsx")
View(data)
data<-read_excel("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master2.csv",header=T,sep=";",dec=".")
data<-read.csv2("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex/master2.csv",header=T,sep=";",dec=".")
View(data)
str(data)
data2<-subset(data,annee==2012 & situation=="30 mois apres le diplome"& remarque=="",select=c(2,4,6:8,10,16:19,21,27))
insertion_master<- na.omit(data2) #on enleve les lignes avec valeurs manquantes
View(insertion_master)
usethis::use_data(insertion_master)
library(charclust)
library(charclust)
nrow(NULL)
NULL ==3
a = 3
names(a) = c('name')
a
library(charclust)
data("insertion_master")
data.illu <- insertion_master[,c(1:6,12)]
data.act <-insertion_master[,7:11]
res.kmeans<-kmeans(data.act,centers=3,nstart=5)
obj <- objcharac(insertion_master, data.act, data.illu, res.kmeans$cluster)
uni = charac_uni(obj)
library(charclust)
data(insertion_master)
data.illu <- insertion_master[,c(1:6,12)]
data.act <-insertion_master[,7:11]
res.kmeans<-kmeans(data.act,centers=3,nstart=5)
obj <- objcharac(insertion_master, data.act, data.illu, res.kmeans$cluster)
uni = charac_uni(obj)
#graph for active variables
g_act <- charac_graph(obj, type = "act")
print(g_act)
print(g_act$taux_dinsertion)
#graph for illustrative variables, distribution foreach cluster
g_illus <- charac_graph(obj, type = "illus", profile = "l")
library(charclust)
data(insertion_master)
data.illu <- insertion_master[,c(1:6,12)]
data.act <-insertion_master[,7:11]
res.kmeans<-kmeans(data.act,centers=3,nstart=5)
obj <- objcharac(insertion_master, data.act, data.illu, res.kmeans$cluster)
#graph for active variables
g_act <- charac_graph(obj, type = "act")
print(g_act$taux_dinsertion)
#graph for illustrative variables, distribution foreach cluster
g_illus <- charac_graph(obj, type = "illus", profile = "l")
print(g_illus)
print(g_illus$domaine)
#' #graph for illustrative variables, distribution of clusters foreach modality
g_illus2 <- charac_graph(obj, type = "illus", profile = "c")
print(g_illus2)
print(g_illus2$domaine)
#PCA graph
g_pca <-  charac_graph(obj, type = "pca")
g_pca
#Contribution of variables foreach components
g_pca$var
#Individuals and clusters in PCA chart
g_pca$ind
#Individuals and clusters in PCA chart with labels
g_pca$ind_lab
print(g_act)
print(g_act$taux_dinsertion)
t = testval(obj)
#print all numerical results
print(t$num)
#plot radar chart of values test for numeric variables
t$graph
#print result for numeric variables
tquanti <- t$num[[1]]
print(tquanti)
#print result for one numeric variable
print(tquanti[,"taux_dinsertion"])
#print result for qualitative variables
tquali <- t$num[[2]]
print(tquali)
#print result for one qualitative variable
print(tquali$domaine)
db2 = db_index(obj)
print(db2)
adl = clustlda(obj)
#the coefficients of LDA model
print(adl$coef_LDA)
#the confusion matrix
print(adl$confusion_matrix)
print(adl$eval)
s2 = sil(obj)
s2$silclus
s2$silglob
s2$plot
setwd("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex")
#librairies
library(readxl)
datas = read_excel("auto.xlsx")
autos = datas[,2:8]
row.names(autos) = datas$Modele
autos.cr = scale(autos, center = T, scale = T)
d.autos = dist(autos.cr)
cah = hclust(d.autos, method="ward.D2")
groupes.cah <- cutree(cah, k=4)
my_clust = cbind(datas[,-1], groupes.cah)
cate = categorisation(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
###################Constructeur
categorisation = function(df, var_act, var_illus, var_grp){
#controles
if(!is.data.frame(df)){
stop("L'argument df n'est pas un data frame")
}
#creation de l'instance
instance = list()
instance$data = df
instance$act = data.frame(var_act)
instance$illus = data.frame(var_illus)
#colonne des clusters
instance$grp = var_grp
#liste des clusters
instance$n_grp = sort(unique(var_grp))
class(instance) = "categorisation"
return(instance)
}
cate = categorisation(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
length(levels(cate$grp))
length(levels(as.factor(cate$grp)))
length(levels(cate$act$puissance))
length(levels(as.factor(cate$act$puissance)))
length(levels(as.factor(cate$illus$origine)))
library(charclust)
setwd("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex")
#librairies
library(readxl)
###################--------------------------------Test--------------------------------------------
#import des donn?es
datas = read_excel("auto.xlsx")
autos = datas[,2:8]
row.names(autos) = datas$Modele
autos.cr = scale(autos, center = T, scale = T)
d.autos = dist(autos.cr)
cah = hclust(d.autos, method="ward.D2")
groupes.cah <- cutree(cah, k=4)
my_clust = cbind(datas[,-1], groupes.cah)
cate = categorisation(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
cate = objcharac(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
univariee.categorisation(cate)
charac_uni(cate)
X = c(10, 11, 12, 28)
Y = c(20, 23, 28, 15)
f = c(0,1,0,1)
cl = c(1, 1, 1, 2)
data = as.data.frame(cbind(X, Y,f, cl))
colnames(data) = c("X", "Y","f", "cluster")
obj = categorisation(data, data[, -4], NULL, data$cluster)
obj =objcharac(data, data[, -4], NULL, data$cluster)
a = charac_graph(obj)
a = charac_graph(obj, type = "act")
data$f = as.factor(data$f)
obj =objcharac(data, data[, -4], NULL, data$cluster)
a = charac_graph(obj, type = "act")
a$f
binar<-read_excel("Donnéesmodifiéesavecétablissement.xlsx")
binact<-binar[,6:11]
binillus<-binar[,5]
kmbin<-kmeans(binact,centers=3,nstart=5)
objbin<-objcharac(binar,binact,binillus,kmbin$cluster)
objbin$data<-as.data.frame(objbin$data)
charac_uni(objbin, type="act")
charac_graph(objbin, type="act")
View(binact)
colnames(objbin$act)
cbind(objbin$act,objbin$grp)
cbind(objbin$act,objbin$grp)[colnames(objbin$act)]
View(binillus)
charac_graph(objbin, type="illus")
setwd("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex")
#librairies
library(readxl)
binar<-read_excel("Donnéesmodifiéesavecétablissement.xlsx")
binact<-binar[,6:11]
binillus<-binar[,5]
kmbin<-kmeans(binact,centers=3,nstart=5)
objbin<-objcharac(binar,binact,binillus,kmbin$cluster)
library(charclust)
objbin<-objcharac(binar,binact,binillus,kmbin$cluster)
objbin$data<-as.data.frame(objbin$data)
charac_graph(objbin, type="illus")
a = charac_graph(objbin, type="illus")
a$domaine
View(binact)
View(binillus)
a = charac_graph(objbin, type="act")
a = charac_graph(objbin, type="act")
binact<-binar[,7:11]
binillus<-binar[,5:6]
bintot<-cbind(binact,binillus)
kmbin<-kmeans(binact,centers=3,nstart=5)
objbin<-objcharac(bintot,binact,binillus,kmbin$cluster)
objbin$data<-as.data.frame(objbin$data)
colnames(objbin$act)<-c("LLA","MEEF","SHS","STS","insertion")
colnames(objbin$data)<-c("DEG","LLA","MEEF","SHS","STS","insertion","domaine")
charac_graph(objbin, type="act")
charac_graph(objbin, type="illus")
data(insertion_master)
data.illu <- insertion_master[,c(1:6,12)]
data.act <-insertion_master[,7:11]
res.kmeans<-kmeans(data.act,centers=3,nstart=5)
obj2 <- objcharac(insertion_master, data.act, data.illu, res.kmeans$cluster)
b = charac_graph(obj2, type = "act")
b$taux_dinsertion
b$salaire_brut_annuel_estime
charac_graph(objbin, type="illus")
a = charac_graph(objbin, type="act")
b = charac_graph(obj2, type = "act", profile = "c")
b$taux_dinsertion
b$salaire_brut_annuel_estime
b = charac_graph(obj2, type = "illus", profile = "c")
b$taux_dinsertion
b$salaire_brut_annuel_estime
b$diplome
a = charac_graph(objbin, type="illus", profile = "c")
a$domaine
library(charclust)
setwd("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex")
#librairies
library(readxl)
binar<-read_excel("Donnéesmodifiéesavecétablissement.xlsx")
binact<-binar[,7:11]
binillus<-binar[,5:6]
bintot<-cbind(binact,binillus)
kmbin<-kmeans(binact,centers=3,nstart=5)
objbin<-objcharac(bintot,binact,binillus,kmbin$cluster)
colnames(objbin$act)<-c("LLA","MEEF","SHS","STS","insertion")
colnames(objbin$data)<-c("DEG","LLA","MEEF","SHS","STS","insertion","domaine")
a = charac_graph(objbin, type="illus", profile = "c")
a$domaine
library(charclust)
setwd("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex")
#librairies
library(readxl)
binar<-read_excel("Donnéesmodifiéesavecétablissement.xlsx")
binact<-binar[,7:11]
binillus<-binar[,5:6]
bintot<-cbind(binact,binillus)
kmbin<-kmeans(binact,centers=3,nstart=5)
objbin<-objcharac(bintot,binact,binillus,kmbin$cluster)
colnames(objbin$act)<-c("LLA","MEEF","SHS","STS","insertion")
colnames(objbin$data)<-c("DEG","LLA","MEEF","SHS","STS","insertion","domaine")
a = charac_graph(objbin, type="illus", profile = "c")
a$domaine
a = charac_graph(objbin, type="illus", profile = "l")
a$domaine
library(charclust)
library(charclust)
devtools::build_manual()
devtools::build_manual()
library(charclust)
setwd("C:/Users/Axelle/Desktop/M/03_SISE/01_PROGRAMMATION R/PROJET/ex")
#librairies
library(readxl)
datas = read_excel("auto.xlsx")
autos = datas[,2:8]
row.names(autos) = datas$Modele
autos.cr = scale(autos, center = T, scale = T)
d.autos = dist(autos.cr)
cah = hclust(d.autos, method="ward.D2")
groupes.cah <- cutree(cah, k=4)
my_clust = cbind(datas[,-1], groupes.cah)
cate = objcharac(my_clust, my_clust[,1:7], my_clust[,7:11], my_clust$groupes.cah)
print(cate)
library(charclust)
library(charclust)
data(insertion_master)
data.illu <- insertion_master[,c(1:6,12)]
data.act <-insertion_master[,7:11]
res.kmeans<-kmeans(data.act,centers=3,nstart=5)
obj <- objcharac(insertion_master, data.act, data.illu, res.kmeans$cluster)
#graph for active variables
g_act <- charac_graph(obj, type = "act")
print(g_act)
print(g_act$taux_dinsertion)
#graph for illustrative variables, distribution foreach cluster
g_illus <- charac_graph(obj, type = "illus", profile = "l")
print(g_illus)
print(g_illus$domaine)
print(g_illus$femmes)
#' #graph for illustrative variables, distribution of clusters foreach modality
g_illus2 <- charac_graph(obj, type = "illus", profile = "c")
print(g_illus2)
print(g_illus2$domaine)
#PCA graph
g_pca <-  charac_graph(obj, type = "pca")
#Contribution of variables foreach components
g_pca$var
#Individuals and clusters in PCA chart
g_pca$ind
#Individuals and clusters in PCA chart with labels
g_pca$ind_lab
library(charclust)
library(charclust)
library(charclust)
library(charclust)
library(charclust)
library(charclust)
library(charclust)
library(charclust)
View(insertion_master)
